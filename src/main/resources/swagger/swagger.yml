swagger: "2.0"
info:
  description: "To Do..."
  version: "1.0.0"
  title: "New Project"
host: "newproject.swagger.io"
basePath: "/v2"
tags:
  - name: "User"
  - name: "Product"
  - name: "Category"
  - name: "Order"
schemes:
  - "https"
  - "http"
paths:
  /users/{id}:
    get:
      tags:
        - "User"
      summary: "Find User by ID"
      description: "Returns a single User"
      operationId: "getUserById"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of User to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful Operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid ID Supplied"
        "404":
          description: "User Not Found"
    delete:
      tags:
        - "User"
      summary: "Deletes a User by Id"
      description: "Delete a user of the database"
      operationId: "deleteUser"
      parameters:
        - name: "id"
          in: "path"
          description: "User id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "204":
          description: "Deleted User"
        "400":
          description: "Invalid ID Supplied"
        "404":
          description: "User not found"
  /users:
    get:
      tags:
        - "User"
      summary: "Get All Users"
      description: "Return All User"
      operationId: "getUsers"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetUsersResponse"
    post:
      tags:
        - "User"
      summary: "Post New User"
      description: "Add new user to the database"
      operationId: "addUser"
      parameters:
        - in: "body"
          name: "body"
          description: "User object that needs to be added to the Database."
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "405":
          description: "Invalid input user"
        "201":
          description: "Created new user"
    put:
      tags:
        - "User"
      summary: "Update an existing User"
      description: "Updating an existing user's data"
      operationId: "updateUser"
      parameters:
        - in: "body"
          name: "body"
          description: "User object that needs to be update to the database."
          required: true
          schema:
            $ref: "#/definitions/PutUserRequest"
      responses:
        "400":
          description: "Invalid ID Supplied"
        "404":
          description: "User Not Found"
        "200":
          description: "OK - Updated User"
  /products/{id}:
    get:
      tags:
        - "Product"
      summary: "Get Products by ID"
      description: "Returns a single Product"
      operationId: "getUProductById"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of Product to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful Operation"
          schema:
            $ref: "#/definitions/Product"
        "400":
          description: "Invalid ID Supplied"
        "404":
          description: "Product Not Found"
  /products:
    get:
      tags:
        - "Product"
      summary: "Get All Products"
      description: "Return All Products"
      operationId: "getProducts"
      responses:
        "200":
          description: "Successful Operation"
          schema:
            $ref: "#/definitions/GetProductsResponse"
  /categories/{id}:
    get:
      tags:
        - "Category"
      summary: "Find Category by ID"
      description: "Returns a single Category"
      operationId: "getCategoryById"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of Category to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful Operation"
          schema:
            $ref: "#/definitions/Category"
        "400":
          description: "Invalid ID Supplied"
        "404":
          description: "Category Not Found"
  /categories:
    get:
      tags:
        - "Category"
      summary: "Get All CAtegories"
      description: "Return All Categories"
      operationId: "getCategories"
      responses:
        "200":
          description: "Successful Operation"
          schema:
            $ref: "#/definitions/GetCategoriesResponse"
  /orders/{id}:
    get:
      tags:
        - "Order"
      summary: "Find Order by ID"
      description: "Returns a single Order"
      operationId: "getOrderById"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of Order to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful Operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid ID Supplied"
        "404":
          description: "Order Not Found"
  /orders:
    get:
      tags:
        - "Order"
      summary: "Get All Orders"
      description: "Return All Orders"
      operationId: "getOrders"
      responses:
        "200":
          description: "Successful Operation"
          schema:
            $ref: "#/definitions/Order"
definitions:
  User:
    type: "object"
    required:
      - "name"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"
  GetUsersResponse:
    type: "array"
    items:
      $ref: "#/definitions/User"
  PutUserRequest:
    type: "object"
    required:
      - "name"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
  Category:
    type: "object"
    required:
      - "name"
    properties:
      name:
        type: "string"
  GetCategoriesResponse:
    type: "array"
    items:
      $ref: "#/definitions/Category"
  Product:
    type: "object"
    required:
      - "name"
    properties:
      name:
        type: "string"
      description:
        type: "string"
      price:
        type: "number"
        format: "double"
        example: "11.11"
      category:
        type: "string"
  GetProductsResponse:
    type: "array"
    items:
      $ref: "#/definitions/Product"
  OrderItem:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      nameProduct:
        type: "string"
      quantity:
        type: "integer"
      price:
        type: "number"
        format: "double"
      subTotal:
        type: "number"
        format: "double"
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      moment:
        type: "string"
        example: "2023-05-24T08:30:50"
      status:
        type: "string"
        description: "Order Status"
        enum:
          - "waiting payment"
          - "paid"
          - "shipped"
          - "delivered"
          - "canceled"
      orderItem:
        type: "array"
        items:
          $ref: "#/definitions/OrderItem"